{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils.ts", "../src/instances.ts", "../src/Asset.ts", "../src/Dandiset.ts"],
  "sourcesContent": ["export * from './Dandiset'\nexport * from './Asset'\nexport * as utils from './utils'\n// const assetInfo = await dandi.getJSON(`${url}/${o.asset_id}/info`)\n// const option = document.createElement('option')\n// option.value = assetInfo.metadata.contentUrl[0]", "import instances from \"./instances\"\nimport { InstanceType, Options } from \"./types\"\n\nexport const getLatestVersion = async (id: string, instance?: InstanceType) => {\n    const base = await getBase(id, instance)\n\n    if (base){\n        const recent = base.most_recent_published_version?.version\n        if (recent) return recent\n\n        const isValidDraft = base.draft_version?.status === 'Valid'\n        if (isValidDraft) return base.draft_version?.version\n    } else return null\n}\n\nexport const getInstance = (instance?: InstanceType) => typeof instance === 'string' ? instances[instance] : instances.main\n\nexport const getJSON = (url: string) => fetch(url).then(res => res.json())\n\nconst getBaseURL = (id: string, instance?: InstanceType) => `https://${getInstance(instance)}/api/dandisets/${id}`\n\nexport const getBase = (id: string, instance?: InstanceType) => getJSON(getBaseURL(id, instance))\n\nexport const getInfoURL = (id: string, options?: Options) => `${getBaseURL(id, options?.instance)}/versions/${options?.version ? options.version : 'draft'}`\n\nexport const getInfo = async (id: string, options?: Options) => {\n  const version = options?.version ?? await getLatestVersion(id, options?.instance)\n  if (version) return getJSON(getInfoURL(id, {...options, version}))\n}\n\n\nexport const paginate = async (o: any) : Promise<any[]> => {\n\n    const results = []\n  \n    if (o.results) results.push(...o.results)\n  \n    if (o.next) {\n      const info = await getJSON(o.next)\n      results.push(...await paginate(info))\n    }\n    \n    return results\n  }", "const instances = {\n    main: `api.dandiarchive.org`,\n    staging:  `api-staging.dandiarchive.org`\n}\n\nexport default instances", "import { InstanceType, Options } from \"./types\"\nimport { getInfoURL, getJSON } from \"./utils\"\n\ntype AssetBase = {\n    asset_id: string\n    blob: string\n    created: string\n    modified: string\n    path: string\n    size: number\n    zarr: string | null // NOTE: Not sure if this type is correct\n  }\n  \nexport class Asset {\n\n    asset_id?: AssetBase['asset_id']\n    blob?: AssetBase['blob']\n    created?: AssetBase['created']\n    modified?: AssetBase['modified']\n    path?: AssetBase['path']\n    size?: AssetBase['size']\n    zarr?: AssetBase['zarr']\n\n    #instance: InstanceType\n    #dandiset: string\n    #info: any = {}\n    \n    constructor(dandiset: string, info: string | AssetBase, instance: InstanceType = 'main') {\n    if (info && typeof info === 'object' && !(info instanceof String)) this.#set(info)\n    else this.asset_id = info as string\n    this.#instance = instance\n    this.#dandiset = dandiset\n    }\n  \n    #set = (o: any) => {\n        Object.assign(this, o)\n        this.asset_id = o.asset_id  // Sync the provided ID with the object\n    }\n  \n    async get (dandiset = this.#dandiset, id = this.asset_id, instance = this.#instance) {\n      this.#dandiset = dandiset\n      this.#instance = instance\n      this.asset_id = id\n\n      const asset = await getAsset(this.#dandiset, this.asset_id, this.#instance)\n      if (asset) Object.assign(this, asset)\n      return asset\n    }\n  \n  \n    async getInfo(options?: Options) {\n      if (!this.#info) this.#info = await getAssetInfo(this.#dandiset, this.asset_id, {...options, instance: this.#instance})\n      return this.#info\n    }\n  \n  }\n\n\n\nexport const getAsset  = async (dandiset: string, id: string, options?: Options) => {\n    const url = getInfoURL(dandiset, options)\n    const base = await getJSON(`${url}/${id}`)\n    return new Asset(dandiset, base, options?.instance)\n  }\n  \n  \n  export const getAssetInfo  = async (dandiset: string, id: string, options?: Options) => {\n    const url = getInfoURL(dandiset, options)\n    return await getJSON(`${url}/${id}/info`)\n  }\n\n  export default Asset\n  ", "import { Asset, getAsset } from \"./Asset\"\nimport { InstanceType, Options } from \"./types\"\nimport { getBase, getInfo, getInfoURL, getInstance, getJSON, getLatestVersion, paginate } from \"./utils\"\n\ntype DandisetVersionInfo = {\n    asset_count: number,\n    created: string\n    modified: string\n    name: string\n    size: number\n    status: string\n    version: string | 'draft'\n  }\n  type DandisetBase = {\n    identifier: string\n    contact_person: string\n    created: string\n    embargo_status: string\n    modified: string\n    draft_version: DandisetVersionInfo\n    most_recent_published_version: DandisetVersionInfo\n  }\n\n  export class Dandiset {\n\n    #instance: InstanceType = 'main'\n  \n  \n    // All provided synchronously from the constructor\n    identifier?: DandisetBase['identifier']\n    contact_person?: DandisetBase['contact_person']\n    created?: DandisetBase['created']\n    embargo_status?: DandisetBase['embargo_status']\n    modified?: DandisetBase['modified']\n    draft_version?: DandisetBase['draft_version']\n    most_recent_published_version?: DandisetBase['most_recent_published_version']\n  \n    // Hidden properties fetched asynchronously\n    #base: any = {}\n    #info: any = {}\n    #assets: any = {}\n    #gotAllAssets = false\n\n\n    constructor(info: DandisetBase | DandisetBase['identifier'] | undefined, instance: InstanceType = 'main') {\n        if (info && typeof info === 'object' && !(info instanceof String)) this.#set(info)\n        else this.identifier = info as string\n        this.#instance = instance\n      }\n  \n      #set = (o: any) => {\n        this.#base = o\n        Object.assign(this, o)\n        this.identifier = o.identifier  // Sync the provided ID with the object\n      }\n  \n    async get (id = this.identifier) {\n\n        if (id !== this.identifier) {\n            this.identifier = id\n            this.#info = {}\n            this.#assets = {}\n\n            const base = await getBase(this.identifier, this.#instance)\n            if (base) Object.assign(this, base)\n        }\n\n        return this.#base\n\n    }\n  \n    async getInfo(options: Options = {}) {\n      if (Object.keys(this.#info).length === 0) this.#info = await getInfo(this.identifier, {...options, instance: this.#instance})\n      return this.#info\n    }\n  \n    async getAsset(id: string) {\n        if (!this.#assets[id]) this.#assets[id] = await getAsset(this.identifier, id, {instance: this.#instance})\n        return this.#assets[id]\n    }\n  \n    async getAssets(options: Options = {}) {\n        if (!this.#gotAllAssets) {\n        const assets = await getAssets(this.identifier, {...options, instance: this.#instance})\n        assets?.forEach((o: any) => this.#assets[o.asset_id] = o)\n        this.#gotAllAssets = true\n      }\n      return this.#assets\n    }\n  }\n\n\n\n  export const getAssetsUrl = (dandiset: string, options?: Options) => {\n    return `${getInfoURL(dandiset, options)}/assets`\n  }\n\nexport const getAssets = async (id: string, options?: Options) => {\n    const version = options?.version ?? await getLatestVersion(id, options?.instance)\n    if (version) {\n      const url = `${getAssetsUrl(id, {...options, version})}`\n      const res = await getJSON(url)\n      return (await paginate(res)).map(o => new Asset(id, o, options?.instance))\n    }\n  }\n  \n  \n  \n  export const getAll = async (instance?: Options['instance']) => {\n    const url = `https://${getInstance(instance)}/api/dandisets`\n    const res = await getJSON(url)\n    const results = (await paginate(res)).map(o => new Dandiset(o, instance))\n    return results\n  }\n  \n  export const get = async (id: string, instance?: InstanceType) => {\n    const info = await getBase(id, instance)\n    if (info) return new Dandiset(info, instance)\n    else return null\n  }\n  "],
  "mappings": "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",
  "names": []
}
